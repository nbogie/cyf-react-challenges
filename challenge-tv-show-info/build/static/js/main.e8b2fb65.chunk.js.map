{"version":3,"sources":["DropDown.js","Heading.js","ProcessJson.js","App.js","serviceWorker.js","index.js"],"names":["DropDown","generateEpisodes","_this","props","data","map","episode","index","react_default","a","createElement","value","key","setCurrentEpisode","event","currentEpisode","target","className","onChange","this","Component","Heading","align","ProcessJson","findEpisode","find","name","RenderEpisode","episodeSummary","summary","replace","season","number","src","image","medium","alt","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","Battlestar","src_Heading","src_DropDown","episodeList","src_ProcessJson","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAkCeA,6MA9BbC,iBAAmB,WACjB,OAAOC,EAAKC,MAAMC,KAAKC,IAAI,SAACC,EAAQC,GAClC,OACEC,EAAAC,EAAAC,cAAA,UAAQC,MAAOL,EAASM,IAAKL,GAAQD,QAK3CO,kBAAoB,SAAAC,GAClBZ,EAAKC,MAAMY,eAAeD,EAAME,OAAOL,gFAIzC,OACEH,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,gCAAgCL,IAAI,OAC/CJ,EAAAC,EAAAC,cAAA,UAAQQ,SAAUC,KAAKN,kBAAmBD,IAAK,GAC/CJ,EAAAC,EAAAC,cAAAS,KAAMlB,iBAAN,QAGJO,EAAAC,EAAAC,cAAA,oBAtBuBU,oBCmBRC,mLAbX,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIO,UAAU,WAAWK,MAAM,UAA/B,8CARcF,aCqCPG,6MAnCbC,YAAc,WAEV,OAAOtB,EAAKC,MAAMC,KAAKqB,KAAK,SAAAnB,GACzB,OAAOA,EAAQoB,OAASxB,EAAKC,MAAMG,aAI1CqB,cAAgB,WACd,IAAIrB,EAAUJ,EAAKsB,cAEfI,EAAiBtB,EAAQuB,QAAQC,QAAQ,gBAAgB,IAC7D,OACEtB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oBAAYJ,EAAQyB,OAApB,aAAsCzB,EAAQ0B,QAC9CxB,EAAAC,EAAAC,cAAA,SAAIJ,EAAQoB,MACZlB,EAAAC,EAAAC,cAAA,OAAKuB,IAAK3B,EAAQ4B,MAAMC,OAAQC,IAAI,UACpC5B,EAAAC,EAAAC,cAAA,KAAGO,UAAU,4BAA4BW,6EAQ7C,OACEpB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WAAWK,MAAM,UAChCd,EAAAC,EAAAC,cAAAS,KAAMQ,cAAN,cA5BsBP,aCqCXiB,cAhCb,SAAAA,EAAYlC,GAAO,IAAAD,EAAA,OAAAoC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACjBnC,EAAAoC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,KAAMhB,KAcVY,eAAiB,SAAAD,GACbZ,EAAKyC,SAAS,CAAChC,MAAOG,KAdtBZ,EAAK0C,MAAQ,CACTjC,MAAOkC,EAAW,GAAGnB,MAHRxB,6EAQnB,OACE2C,EAAWxC,IAAI,SAAAC,GACb,OAAOA,EAAQoB,wCAWjB,OACElB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,kBACbT,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,CAAU3C,KAAMe,KAAK6B,cAAejC,eAAgBI,KAAKJ,iBACzDP,EAAAC,EAAAC,cAACuC,EAAD,CAAa7C,KAAMyC,EAAYvC,QAASa,KAAKyB,MAAMjC,gBA1BzCS,aCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e8b2fb65.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass DropDown extends Component {\n\n  generateEpisodes = () => {\n    return this.props.data.map((episode,index) => {\n      return(\n        <option value={episode} key={index}>{episode}</option>\n      )\n    })\n  }\n\n  setCurrentEpisode = event => {\n    this.props.currentEpisode(event.target.value)\n}\n\nrender(){\n  return(\n    <div>\n<div className=\"d-flex justify-content-center\" key='key'>\n    <select onChange={this.setCurrentEpisode} key={1}>\n    <this.generateEpisodes />\n</select>\n</div>\n<div>\n</div>\n</div>\n  )\n\n}\n\n}\n\n\nexport default DropDown\n","import React, { Component } from \"react\";\n\nclass Heading extends Component {\n\n\n\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"col-xs-1\" align=\"center\">\n        Battlestar Galactica Episode Guide\n        </h1>\n\n\n      </div>\n    );\n  }\n}\n\n\nexport default Heading;\n","import React, { Component } from \"react\";\n\nclass ProcessJson extends Component {\n\n  findEpisode = () => {\n\n      return this.props.data.find(episode => {\n         return episode.name === this.props.episode\n        })\n    }\n\n  RenderEpisode = () => {\n    let episode = this.findEpisode();\n    //HTML strip regex code from https://css-tricks.com/snippets/javascript/strip-html-tags-in-javascript/\n    let episodeSummary = episode.summary.replace(/(<([^>]+)>)/ig,\"\");\n    return(\n      <div>\n      <p>Season: {episode.season} Episode: {episode.number}</p>\n      <p>{episode.name}</p>\n      <img src={episode.image.medium} alt=\"hello\" />\n      <p className=\"text-center text-padding\">{episodeSummary}</p>\n      </div>\n\n    )\n\n  }\n\nrender(){\n  return(\n    <div className=\"col-xs-1\" align=\"center\">\n    <this.RenderEpisode />\n    </div>\n  )\n}\n\n\n}\n\n\nexport default ProcessJson\n","import React, { Component } from \"react\";\nimport DropDown from \"./DropDown\";\nimport Battlestar from \"./data/BattlestarGalactica.json\";\nimport Heading from \"./Heading\";\nimport ProcessJson from './ProcessJson';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        value: Battlestar[0].name\n    };\n}\n\nepisodeList(){\n  return(\n    Battlestar.map(episode => {\n      return episode.name\n    })\n  )\n}\n\ncurrentEpisode = event => {\n    this.setState({value: event});\n}\n\n\n  render() {\n    return (\n      <div className=\"container main\">\n        <Heading />\n        <DropDown data={this.episodeList()} currentEpisode={this.currentEpisode} />\n        <ProcessJson data={Battlestar} episode={this.state.value} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}